# -*- coding: utf-8 -*-
"""FastAI_keurmerken.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z15yPkgVqDtoXeKSjrHoOwTunw4AlQ5h
"""

# Commented out IPython magic to ensure Python compatibility.
from fastai.vision import *
import ssl
ssl._create_default_https_context = ssl._create_unverified_context
# %matplotlib inline
warnings.filterwarnings('ignore')
# %matplotlib inline

# Load the Drive helper and mount
from google.colab import drive

# This will prompt for authorization.
drive.mount('/content/drive')

# After executing the cell above, Drive
# files will be present in "/content/drive/My Drive".
!ls "/content/drive/My Drive/Colab Notebooks"

folder1 = 'asc'
file1 = 'asc.csv'

folder2 = 'utz'
file2 = 'utz.csv'

folder3 = 'msc'
file3 = 'msc.csv'

#You will need to run this cell once per each category (folder1, folder2, folder3)
path = Path('/content/drive/My Drive/Colab Notebooks')
dest = path/folder3
dest.mkdir(parents=True, exist_ok=True)

#You will need to run this cell once per each category (file1, file2, file3)
path = Path('/content/drive/My Drive/Colab Notebooks')
download_images(path/file2, dest, max_pics=100, max_workers=0)

classes = ['asc', 'utz', 'msc']

for c in classes:
    print(c)
    verify_images(path/c, delete=True, max_size=500)

"""# View data"""

np.random.seed(42)
data = ImageDataBunch.from_folder(path, train=".", valid_pct=0.2,
        ds_tfms=get_transforms(do_flip=True), size=224, num_workers=4).normalize(imagenet_stats)

data.classes

data.show_batch(rows=3, figsize=(7,8))

data.classes, data.c, len(data.train_ds), len(data.valid_ds)

"""## Data augmentation"""

data_aug = ImageDataBunch.from_folder(path, train = ".", valid_pct = 0.2, 
            ds_tfms = get_transforms(do_flip=True, flip_vert=False, 
                                     max_rotate=10.0, max_zoom=1.1, max_lighting=0.2, 
                                     max_warp=0.2, p_affine=0.75, p_lighting=0.75, xtra_tfms=None), size=224, num_workers=4).normalize(imagenet_stats)

def get_ex(): return open_image('/content/drive/My Drive/Colab Notebooks/asc/00000002.jpg')


def plots_f(rows, cols, width, height, **kwargs):
    [get_ex().apply_tfms(tfms[0], **kwargs).show(ax=ax) for i,ax in enumerate(plt.subplots(
        rows,cols,figsize=(width,height))[1].flatten())]

plots_f(2, 4, 12, 6, size=224)

"""## Train model"""

learn = cnn_learner(data, models.resnet34, metrics=accuracy)

learn.fit_one_cycle(3)

#learn.fit_one_cycle(4)

learn.save('stage-1')
learn.unfreeze()
learn.lr_find()

# If the plot is not showing try to give a start and end learning rate
# learn.lr_find(start_lr=1e-5, end_lr=1e-1)
learn.recorder.plot()

learn.fit_one_cycle(12, max_lr=slice(1e-06, 1e-03))

learn.save('stage-2')

"""## Interpretation"""

learn.load('stage-2');

interp = ClassificationInterpretation.from_learner(learn)

interp.plot_confusion_matrix()

interp.most_confused(min_val=2)

"""## Cleaning up"""

from fastai.widgets import *

db = (ImageList.from_folder(path)
                   .split_none()
                   .label_from_folder()
                   .transform(get_transforms(), size=224)
                   .databunch()
     )

learn_cln = cnn_learner(db, models.resnet34, metrics=error_rate)

learn_cln.load('stage-2');

ds, idxs = DatasetFormatter().from_toplosses(learn_cln)

# Don't run this in google colab or any other instances running jupyter lab.
# If you do run this on Jupyter Lab, you need to restart your runtime and
# runtime state including all local variables will be lost.

#ImageCleaner(ds, idxs, path)

ds, idxs = DatasetFormatter().from_similars(learn_cln)

# ImageCleaner(ds, idxs, path)

"""## Putting your model in production"""

learn.export()

defaults.device = torch.device('cpu')

img1 = open_image(path/'asc'/'00000023.jpg')
img1

img2 = open_image(path/'msc'/'00000001.png')
img2

img3 = open_image(path/'utz'/'00000001.png')
img3

learn = load_learner(path)

# pred_class,pred_idx,outputs = learn.predict(img)
pred_class = learn.predict(img1)
pred_class
# result: it predicted the image as a “asc” with 18.2% probs

# pred_class,pred_idx,outputs = learn.predict(img)
pred_class = learn.predict(img2)
pred_class
# result: it predicted the image as a “msc” with 35.6% probs

# pred_class,pred_idx,outputs = learn.predict(img)
pred_class = learn.predict(img3)
pred_class
# result: it predicted the image as a “utz” with 87.1% probs







